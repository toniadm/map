{"version":3,"sources":["logo.svg","components/Search.js","components/VenueList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","event","preventDefault","onChange","setState","target","react_default","a","createElement","className","placeholder","Component","VenueList","name","App","getMap","url","index","window","document","getElementsByTagName","scripTag","src","async","defer","parentNode","insertBefore","getScript","initMap","obtVenue","query","params","client_id","client_secret","near","limit","v","axios","get","URLSearchParams","then","response","venues","data","groups","items","catch","err","console","log","map","google","maps","Map","getElementById","center","lat","lng","zoom","infoWindow","InfoWindow","pspVenue","venName","venue","venLoc","location","formattedAddress","venCity","contentString","concat","marker","Marker","position","title","addListener","setContent","open","_this2","venueName","item","i","components_VenueList","key","components_Search","id","role","React","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a88f887.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass Search extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(event) {\n    event.preventDefault();\n    this.props.onChange(this.state.value);\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    return (\n        <input className=\"searchbx\" onChange={this.handleChange} value={this.state.value} placeholder=\"Search...\" />\n    );\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\n\nclass VenueList extends Component {\n\n  render() {\n\n    return <li>{this.props.name}</li>\n\n  }\n\n}\n\nexport default VenueList;","// eslint-disable-next-line\nimport React from 'react';\n// eslint-disable-next-line\nimport * as ReactDOM from \"react-dom\";\n// eslint-disable-next-line\nimport logo from './logo.svg';\nimport './App.css';\n// eslint-disable-next-line\nimport Search from './components/Search';\n// eslint-disable-next-line\nimport VenueList from './components/VenueList';\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n\n  constructor() {\n\n    super();\n    this.state = {\n      venues: [],\n    };\n\n  }\n\n  handleChange(query) {\n    this.obtVenue(query);\n  }\n\n  componentDidMount() {\n    this.obtVenue('food');\n  }\n\n\n/*\n * Get map api key\n */\n  getMap = () => {\n    getScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBQ6zsiorJiComOV7nE9SBs3I43yLrpet4&callback=initMap\")\n    window.initMap = this.initMap\n  }\n\n/*\n * Get venues from Foursquare using Axios\n * Parameters obtained from Foursquare configuration docs\n */\n  obtVenue = (query) => {\n    const apiLoc = \"https://api.foursquare.com/v2/venues/explore?\"\n    const params = {\n      client_id: \"3BFFDXDSP4324WBGN02YMWZADLY1C0FIMIMBRMBI240DTTUO\",\n      client_secret: \"1A0PH415M44JSPIXVPNDC3T3XE40MDVYAU3FR5IFYBYF505C\",\n      query: query,\n      near: \"Palm Springs\",\n      limit:10,\n      v: \"20183012\"\n    }\n    axios.get(apiLoc + new URLSearchParams(params))\n      .then(response => {\n        this.setState({\n          venues: response.data.response.groups[0].items\n        }, this.getMap())\n      })\n      .catch(err => {\n        console.log(\"Alert: There is an error\" + err)\n      })\n  }\n\n\n/*\n * Initialize Google map\n * using Google Maps info window and marker documentation\n */\n  initMap = () => {\n    const map = new window.google.maps.Map(document.getElementById('gmap'), {\n      center: {lat: 33.8302961, lng: -116.54529209999998},\n      zoom: 14\n    });\n\n      /*\n       * Info window creation\n       */\n\n      let infoWindow = new window.google.maps.InfoWindow()\n      let getMyMap = this.state.venues\n\n      // eslint-disable-next-line\n      getMyMap.map(pspVenue => {\n\n        let venName = pspVenue.venue.name\n        let venLoc = pspVenue.venue.location.formattedAddress[0]\n        let venCity = pspVenue.venue.location.formattedAddress[1]\n        let contentString = `${venName} <br> ${venLoc} <br> ${venCity}`\n\n        /*\n         * Marker creation\n         */\n        let marker = new window.google.maps.Marker({\n          position: {lat: pspVenue.venue.location.lat, lng: pspVenue.venue.location.lng},\n          map: map,\n          title: venName,\n          \n        })\n\n\n        /*\n         * Show info window by clicking a marker\n         */\n\n        marker.addListener('click', function() {\n          infoWindow.setContent(contentString)\n          infoWindow.open(map, marker);\n        })\n      })\n\n    }\n\n  render() {\n\n    let venueName = this.state.venues.map((item,i) =>\n      <VenueList key={i} name={item.venue.name} />\n    );\n    console.log(venueName)\n\n    return (\n      <div className=\"app\">\n\n          <Search onChange={(value)=>this.handleChange(value)}/>\n          <ul>\n            {venueName}\n          </ul>\n        <div id=\"gmap\" role=\"application\"></div>\n      </div>\n      );\n    }\n\n}\n\n/*\n * Create script tag\n */\n\nfunction getScript(url) {\n  let index = window.document.getElementsByTagName(\"script\")[0]\n  let scripTag = window.document.createElement(\"script\")\n  scripTag.src = url\n  scripTag.async = true\n  scripTag.defer = true\n  index.parentNode.insertBefore(scripTag, index)\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}